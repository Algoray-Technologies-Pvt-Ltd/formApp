import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formapp/customerComplaintReg/view/widget/ActionDateWidget.dart';
import 'package:formapp/customerComplaintReg/view/widget/InformDateWidget.dart';
import 'package:formapp/customerComplaintReg/view/widget/IsInformedWidget.dart';
import 'package:formapp/customerComplaintReg/view/widget/customernameWidget.dart';
import 'package:formapp/main.dart';

import 'package:formapp/widgets/ktextFeild.dart';

import '../../widgets/KAutoText.dart';
import '../bloc/bloc/customer_complaint_reg_bloc.dart';

class CreateComplainrReg extends StatelessWidget {
  const CreateComplainrReg({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      floatingActionButton: FloatingActionButton(
        backgroundColor: primaryColor,
        onPressed: () {
          context.read<CustomerComplaintRegBloc>().add(SaveEvent());
          Navigator.of(context).pop();
        },
        child: const Icon(Icons.save),
      ),
      appBar: AppBar(
        elevation: 0,
        title: Text('Register Customer Complaint '),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Container(
            decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(5),
                border: Border.all(width: 2, color: Colors.grey)),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: SizedBox(
                    width: MediaQuery.of(context).size.width / 6,
                    child: Table(
                      border: TableBorder.all(
                          color: Colors.grey,
                          width: 1.5,
                          borderRadius: BorderRadius.circular(5)),
                      columnWidths: const {
                        0: FlexColumnWidth(5),
                        1: FlexColumnWidth(5),
                      },
                      children: [
                        TableRow(children: [
                          const Text(
                            "FT No.",
                            style: TextStyle(fontSize: 15.0),
                          ),
                          AutoGeneratedText(autoGeneratedValue: 1),
                        ]),
                        TableRow(children: [
                          const Text(
                            "Rev No.",
                            style: TextStyle(fontSize: 15.0),
                          ),
                          AutoGeneratedText(autoGeneratedValue: 25),
                        ]),
                        TableRow(children: [
                          const Text(
                            "Page No.",
                            style: TextStyle(fontSize: 15.0),
                          ),
                          AutoGeneratedText(autoGeneratedValue: 2),
                        ]),
                        TableRow(children: [
                          const Text(
                            "Date",
                            style: TextStyle(fontSize: 15.0),
                          ),
                          Text(
                            "${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}",
                            style: const TextStyle(fontSize: 15.0),
                          ),
                        ]),
                      ],
                    ),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Container(
                    padding: const EdgeInsets.all(8.0),
                    alignment: Alignment.center,
                    width: MediaQuery.of(context).size.width,
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(5),
                        border: Border.all(width: 2, color: Colors.grey)),
                    child: Wrap(children: [
                      CustomerComplaintNmaeWidget(),
                      KTextField(
                        multiline: true,
                        initialText: '',
                        hintText: 'Address',
                        onChanged: (value) {
                          // context
                          //     .read<CustomerComplaintRegBloc>()
                          //     .add(AddressEvent(formName: value));
                        },
                      ),
                      KTextField(
                        onChanged: (value) {
                          context.read<CustomerComplaintRegBloc>().add(
                              NatureofComplaintEvent(NatureofComplaint: value));
                        },
                        initialText: '',
                        hintText: 'Nature of Complaint',
                      ),
                      KTextField(
                        onChanged: (value) {
                          context
                              .read<CustomerComplaintRegBloc>()
                              .add(RootCauseEvent(RootCause: value));
                        },
                        initialText: '',
                        hintText: 'Root Cause',
                      ),
                      KTextField(
                        onChanged: (value) {
                          context.read<CustomerComplaintRegBloc>().add(
                              CorrectiveActionEvent(CorrectiveAction: value));
                        },
                        initialText: '',
                        hintText: 'Corrective Action',
                      ),
                      KTextField(
                        onChanged: (value) {
                          context.read<CustomerComplaintRegBloc>().add(
                              PreventiveActionEvent(PreventiveAction: value));
                        },
                        initialText: '',
                        hintText: 'Preventive Action',
                      ),
                      ActionDateWidget(),
                      IsInformedWidget(),
                      KTextField(
                        onChanged: (value) {
                          context
                              .read<CustomerComplaintRegBloc>()
                              .add(InformDetailsEvent(InformDetails: value));
                        },
                        initialText: '',
                        hintText: 'Inform to customer Details,',
                      ),
                      InformDateWidget(),
                      KTextField(
                        multiline: true,
                        onChanged: (value) {
                          context
                              .read<CustomerComplaintRegBloc>()
                              .add(RemarksEvent(remarks: value));
                        },
                        initialText: '',
                        hintText: 'Remarks',
                      ),
                    ]),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
